name: Deploy to Heroku

on:
  pull_request:
    branches:
      - develop_release

jobs:
  test-and-validate:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout el código
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar Java y Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 3. Ejecutar los tests unitarios
      - name: Run Unit Tests
        run: mvn test

      # 4. Analizar con SonarCloud
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=menus \
            -Dsonar.organization=VirtualWaiter \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONARCLOUD_TOKEN }}

      # 5. Validar las reglas de SonarCloud
      - name: Check SonarCloud Quality Gate
        id: quality-gate
        uses: sonarsource/sonarcloud-quality-gate-action@v2
        with:
          sonar_token: ${{ secrets.SONARCLOUD_TOKEN }}

  deploy:
    needs: [test-and-validate]
    if: ${{ steps.quality-gate.outputs.status == 'PASSED' }} # Validar que pasa el quality gate de SonarCloud
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout el código
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar Heroku CLI
      - name: Set up Heroku
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          echo ${{ secrets.HEROKU_API_KEY }} | heroku auth:token
          heroku git:remote -a calm-taiga-00119

      # 3. Desplegar en Heroku
      - name: Deploy to Heroku
        run: |
          git push heroku `git rev-parse HEAD`:refs/heads/main --force
